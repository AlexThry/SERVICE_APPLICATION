version: '3.9'
services:
    #### BACKEND ####
    api-gateway:
        build:
            context: ./
            dockerfile: ./.docker/backend/Dockerfile.api-gateway
        ports:
            - '3000:3000' # Map le port local 3000 au port du container
        depends_on:
            user-microservice:
                condition: service_started
            chat-microservice:
                condition: service_started
            notes-microservice:
                condition: service_started
            rabbitmq:
                condition: service_healthy
        networks:
            - app-network
        env_file:
            - ./.envs/global.backend.env
        volumes:
            - ./backend/apps/api-gateway:/usr/src/app
            - /usr/src/app/node_modules

    user-microservice:
        build:
            context: .
            dockerfile: ./.docker/backend/Dockerfile.user-microservice
        ports:
            - '3001:3000'
        depends_on:
            rabbitmq:
                condition: service_healthy
        networks:
            - app-network
        env_file:
            - ./.envs/global.backend.env
        volumes:
            - ./backend/apps/user-microservice:/usr/src/app
            - /usr/src/app/node_modules

    chat-microservice:
        build:
            context: .
            dockerfile: ./.docker/backend/Dockerfile.chat-microservice
        ports:
            - '3002:3000'
        depends_on:
            rabbitmq:
                condition: service_healthy
        networks:
            - app-network
        env_file:
            - ./.envs/global.backend.env
        volumes:
            - ./backend/apps/chat-microservice:/usr/src/app
            - /usr/src/app/node_modules

    notes-microservice:
        build:
            context: .
            dockerfile: ./.docker/backend/Dockerfile.notes-microservice
        ports:
            - '3003:3000'
        depends_on:
            rabbitmq:
                condition: service_healthy
        networks:
            - app-network
        env_file:
            - ./.envs/global.backend.env
        volumes:
            - ./backend/apps/notes-microservice:/usr/src/app
            - /usr/src/app/node_modules

    ####Frontend####
    main:
        build:
            context: .
            dockerfile: ./.docker/frontend/Dockerfile.main
        ports:
            - "5173:5173"
        env_file:
            - ./.envs/global.frontend.env
        networks:
            - app-network
    messaging:
        build:
            context: .
            dockerfile: ./.docker/frontend/Dockerfile.messaging
        ports:
            - "5002:5002"
        env_file:
            - ./.envs/global.frontend.env
        networks:
            - app-network
    notes:
        build:
            context: .
            dockerfile: ./.docker/frontend/Dockerfile.notes
        ports:
            - "5001:5001"
        env_file:
            - ./.envs/global.frontend.env
        networks:
            - app-network

    ####TipTap####

    ####RabbitMQ####
    rabbitmq:
        image: rabbitmq:3-management-alpine
        container_name: 'rabbitmq'
        ports:
            - '5672:5672'
            - '15672:15672'
        volumes:
            - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
            - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
        networks:
            - app-network
        healthcheck:
            test: ['CMD', 'rabbitmq-diagnostics', 'ping']
            interval: 5s
            timeout: 10s
            retries: 10

    ####Mongo####
    mongo:
        image: mongo:latest
        container_name: 'mongo'
        ports:
            - '27017:27017'
        volumes:
            - ~/.docker-conf/mongo/data:/data/db
        networks:
            - app-network

networks:
    app-network:
        driver: bridge
